"""
Django settings for ifcbdb project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'changeme')


ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'dashboard.apps.DashboardConfig',
    'secure.apps.SecureConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ifcbdb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ifcbdb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'ifcb',
        'USER': 'ifcb',
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'ifcb'),
        'HOST': 'postgres',  # <-- IMPORTANT: same name as docker-compose service!
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': 'memcached:11211',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# scheduled tasks

CELERY_BROKER_URL = 'redis://redis:6379'
CELERY_RESULT_BACKEND = 'redis://redis:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_TASK_TRACK_STARTED = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "assets"),
]

LOGIN_URL = 'secure:login'
LOGIN_REDIRECT_URL = 'secure:index'
LOGOUT_REDIRECT_URL = 'secure:login'

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# local settings configured externally
IFCB_PASSWORD_KEY = 'ignore'

_HOST = os.getenv('NGINX_HOST', 'localhost')
_HTTPS_PORT = os.getenv('NGINX_HTTPS_PORT', '443')
_HTTP_PORT = os.getenv('NGINX_HTTP_PORT', '80')

ALLOWED_HOSTS = [_HOST]

# Only include the port if it's a non-standard one
https_origin = f'https://{_HOST}' + (f':{_HTTPS_PORT}' if _HTTPS_PORT != '443' else '')
http_origin = f'http://{_HOST}' + (f':{_HTTP_PORT}' if _HTTP_PORT != '80' else '')

CSRF_TRUSTED_ORIGINS = [https_origin, http_origin]

DEFAULT_DATASET = os.getenv('DEFAULT_DATASET', '')

# Load feature settings from environment variables
FEATURE_PRIVATE_DATASETS = os.getenv('FEATURE_PRIVATE_DATASETS', 'false').lower() == 'true'
FEATURE_USER_ROLES = os.getenv('FEATURE_USER_ROLES', 'false').lower() == 'true'

try:
    from .local_settings import *
except ImportError as e:
    # local_settings are optional since typical deployments can be configured using only env vars above
    pass
